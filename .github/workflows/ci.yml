name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Code Quality & Linting
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check Markdown formatting
      run: npx markdownlint "**/*.md" --config .markdownlint.json
      
    - name: Validate package.json
      run: npm run validate || echo "No validate script found"

  security:
    runs-on: ubuntu-latest
    name: Security Audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate

  performance:
    runs-on: ubuntu-latest
    name: Performance & Best Practices
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run webhint
      run: npx hint . --config .hintrc || echo "Webhint completed with warnings"
      
    - name: Check bundle size (if applicable)
      run: |
        if [ -f "package.json" ] && grep -q "build" package.json; then
          npm run build
          du -sh dist/ || echo "No dist directory found"
        else
          echo "No build script found - vanilla JS project"
        fi

  compatibility:
    runs-on: ubuntu-latest
    name: Browser Compatibility
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        playwright install chromium firefox webkit
        
    - name: Basic browser compatibility test
      run: |
        # Create a simple test HTML file
        cat > test.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>Compatibility Test</title>
        </head>
        <body>
          <div class="slide-builder"></div>
          <script type="module">
            // Test ES module support
            console.log('ES modules supported');
            
            // Test modern JavaScript features
            const testArrowFunction = () => console.log('Arrow functions supported');
            const testTemplateString = `Template strings supported`;
            
            // Test modern APIs
            if ('IntersectionObserver' in window) {
              console.log('IntersectionObserver supported');
            }
            
            if ('fetch' in window) {
              console.log('Fetch API supported');
            }
            
            testArrowFunction();
            console.log(testTemplateString);
          </script>
        </body>
        </html>
        EOF
        
        # Test in different browsers
        playwright-cli screenshot --browser=chromium test.html chromium-test.png
        playwright-cli screenshot --browser=firefox test.html firefox-test.png
        playwright-cli screenshot --browser=webkit test.html webkit-test.png
        
        echo "Browser compatibility tests completed"

  documentation:
    runs-on: ubuntu-latest
    name: Documentation Check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check required files
      run: |
        echo "Checking for required documentation files..."
        
        required_files=(
          "README.md"
          "CONTRIBUTING.md"
          "LICENSE"
          "CODE_OF_CONDUCT.md"
          "SECURITY.md"
        )
        
        missing_files=()
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          else
            echo "✓ $file exists"
          fi
        done
        
        if [ ${#missing_files[@]} -ne 0 ]; then
          echo "❌ Missing required files:"
          printf '%s\n' "${missing_files[@]}"
          exit 1
        else
          echo "✅ All required documentation files present"
        fi
        
    - name: Validate README structure
      run: |
        echo "Validating README structure..."
        
        required_sections=(
          "# SPA with Adobe Edge Delivery Services"
          "## Features"
          "## Getting Started"
          "## Contributing"
          "## License"
        )
        
        for section in "${required_sections[@]}"; do
          if grep -q "$section" README.md; then
            echo "✓ Found: $section"
          else
            echo "❌ Missing: $section"
            exit 1
          fi
        done
        
        echo "✅ README structure validated"

  validate-project-structure:
    runs-on: ubuntu-latest
    name: Project Structure Validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate project structure
      run: |
        echo "Validating project structure..."
        
        # Check for essential configuration files
        config_files=(
          ".eslintrc.js"
          ".gitignore"
          ".hintrc"
          ".markdownlint.json"
        )
        
        for file in "${config_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "⚠️  $file missing (optional but recommended)"
          fi
        done
        
        # Check blocks directory structure
        if [ -d "blocks" ]; then
          echo "✓ blocks directory exists"
          
          # Check each block has required files
          for block_dir in blocks/*/; do
            if [ -d "$block_dir" ]; then
              block_name=$(basename "$block_dir")
              echo "Checking block: $block_name"
              
              if [ -f "${block_dir}${block_name}.js" ]; then
                echo "  ✓ ${block_name}.js exists"
              else
                echo "  ❌ ${block_name}.js missing"
                exit 1
              fi
              
              if [ -f "${block_dir}${block_name}.css" ]; then
                echo "  ✓ ${block_name}.css exists"
              else
                echo "  ⚠️  ${block_name}.css missing (optional)"
              fi
              
              if [ -f "${block_dir}README.md" ]; then
                echo "  ✓ README.md exists"
              else
                echo "  ⚠️  README.md missing (recommended)"
              fi
            fi
          done
        else
          echo "⚠️  blocks directory not found"
        fi
        
        echo "✅ Project structure validation completed"
